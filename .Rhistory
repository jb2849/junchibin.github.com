install.packages("ggplot2")
setwd("C:/Users/bjcfa/Desktop/AVM/Chicago")
install.packages('caret')
install.packages("h2o")
installed.packages("ggmap")
install.packages("ggmap")
install.packages("DMwR")
install.packages("weka")
install.packages("WEKA")
source('C:/Users/bjcfa/Desktop/Azure_DNT/Shared Files/cloudNDI.R')
install.packages("imager")
shiny::runApp('C:/Users/bjcfa/Desktop/Shiny/Practice/practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice/practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice/practice')
runApp('C:/Users/bjcfa/Desktop/Azure_DNT/Shared Files/shiny/first')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice/practice')
shiny::runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
setwd("C:/Users/bjcfa/Desktop/Shiny/Practice")
autsin <- read.csv("austin_filtered.csv")
bakersfield <- read.csv("bakersfield_filter.csv")
detroit <- read.csv("detroit_filtered.csv")
houston <- read.csv("houston_filter.csv")
indianapolis <- read.csv("indianapolis_filter.csv")
View(autsin)
View(autsin)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
load.libraries <- c('data.table', 'testthat', 'gridExtra', 'corrplot', 'GGally', 'ggplot2', 'e1071', 'dplyr')
install.lib <- load.libraries[!load.libraries %in% installed.packages()]
for(libs in install.lib) install.packages(libs, dependences = TRUE)
sapply(load.libraries, require, character = TRUE)
install.packages("gridExtra")
install.packages("dtplyr")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(autsin)
runApp()
runApp()
runApp()
ggplot(austin, aes(x=price)) + geom_histogram()
austin <- read.csv("austin_filtered.csv")
bakersfield <- read.csv("bakersfield_filter.csv")
detroit <- read.csv("detroit_filtered.csv")
houston <- read.csv("houston_filter.csv")
indianapolis <- read.csv("indianapolis_filter.csv")
ggplot(austin, aes(x=price)) + geom_histogram()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
temp <- summary(austin)
temp$
dc
temp
View(austin)
View(austin)
source('~/.active-rstudio-document')
install.packages("pROC")
source('~/.active-rstudio-document')
austin.fin <- feature_select(austin)
source('~/.active-rstudio-document')
austin.fin <- feature_select(austin)
source('~/.active-rstudio-document')
austin.fin <- feature_select(austin)
runApp()
runApp()
runApp()
runApp()
source('~/.active-rstudio-document')
temp <- feature_select(austin)
source('~/.active-rstudio-document')
temp <- feature_select(austin)
temp$1
temp$p
temp
list[1]
temp[1]
plot(p)
source('~/.active-rstudio-document')
temp <- feature_select(austin)
temp[1]
plot(temp[1])
plot(temp[1], xlab="", xaxt = "n")
plot(temp{[1]], xlab="", xaxt = "n")
plot(temp[[1]], xlab="", xaxt = "n")
runApp()
runApp()
runApp()
runApp()
source('~/.active-rstudio-document')
temp <- feature_select(austin)
temp$finalDecision
table(temp$finalDecision)
source('~/.active-rstudio-document')
runApp()
source('~/.active-rstudio-document')
temp <- feature_select(austin)
source('~/.active-rstudio-document')
temp <- feature_select(austin)
temp[2]
class(temp[2])
temp[2][1]
temp[[2]]
data.frame(temp[2])
as.character(temp[2])
runApp()
runApp()
runApp()
runApp()
runApp()
View(austin)
View(bakersfield)
austin <- read.csv("austin_filtered.csv")[,-1:3]
bakersfield <- read.csv("bakersfield_filter.csv")
detroit <- read.csv("detroit_filtered.csv")
houston <- read.csv("houston_filter.csv")
indianapolis <- read.csv("indianapolis_filter.csv")
austin <- read.csv("austin_filtered.csv")[,-c(1:3)]
bakersfield <- read.csv("bakersfield_filter.csv")
detroit <- read.csv("detroit_filtered.csv")
houston <- read.csv("houston_filter.csv")
indianapolis <- read.csv("indianapolis_filter.csv")
View(autsin)
runApp()
View(austin.fin)
runApp()
View(austin.fin)
source('~/.active-rstudio-document')
austin.fin <- feature_select(austin)
View(austin.fin)
View(austin.fin)
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/.active-rstudio-document')
plot_Missing(austin[,colSums(is.na(austin)) > 0, with = FALSE])
plot_Missing(dataset[,colSums(is.na(dataset)) > 0])
plot_Missing(austin[,colSums(is.na(austin)) > 0)
plot_Missing(austin[,colSums(is.na(austin)) > 0)]
plot_Missing(austin[,colSums(is.na(austin)) > 0)])
plot_Missing(austin[,colSums(is.na(austin)) > 0])
runApp()
View(detroit)
source('C:/Users/bjcfa/Desktop/AVM/All data/Duplication/Detroit_model1.R')
source('C:/Users/bjcfa/Desktop/AVM/All data/Duplication/Detroit_model1.R')
source('C:/Users/bjcfa/Desktop/AVM/All data/Duplication/Detroit_model1.R')
source('C:/Users/bjcfa/Desktop/AVM/All data/Duplication/Detroit_model1.R')
source('C:/Users/bjcfa/Desktop/AVM/All data/Duplication/Detroit_model1.R')
View(model_output)
View(train)
quan
source('C:/Users/bjcfa/Desktop/AVM/All data/Duplication/Detroit_model1.R')
quan
source('C:/Users/bjcfa/Desktop/AVM/All data/Duplication/Detroit_model1.R')
quan
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
setwd("C:/Users/bjcfa/Desktop/AVM/Chicago")
chicago <- read.csv("chicago.csv")
View(chicago)
source('C:/Users/bjcfa/Desktop/AVM/All data/feabind.R')
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
install.packages("ggmap")
install.packages("ggmap")
install.packages("ggplot2")
shiny::runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
devtools::install_github("dkahle/ggmap")
install.packages("shinydashboard")
shiny::runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
install.packages("MPV")
install.packages("rmarkdown")
install.packages("flexdashboard")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: eruptions
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
# Chunk 3: tabsets
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
shiny::runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
# Chunk 1
library(shinydashboard)
library(leaflet)
library(raster)
library(htmltools)
library(shinythemes)
library(shiny)
setwd("C:/Users/bjcfa/Desktop/website/New folder")
runApp('C:/Users/bjcfa/Desktop/Shiny/Practice')
library(htmltools)
library(ggplot2)
library(ggmap)
library(png)
library(imager)
library(dtplyr)
library(gridExtra)
library(car)
library(caret)
library(data.table)
library(Boruta)
library(plyr)
library(dplyr)
library(pROC)
library(DT)
library(png)
doPlots <- function(data_in, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(data_in=data_in, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
HTML('<br/>')
plotCorr <- function(data_in, i){
data <- data.frame(x = data_in[[i]], SalePrice = data_in$price)
p <- ggplot(data, aes(x = x, y = SalePrice)) + geom_point(shape = 1, na.rm = TRUE) + geom_smooth(method = lm ) + xlab(paste0(colnames(data_in)[i], '\n', 'R-Squared: ', round(cor(data_in[[i]], data$SalePrice, use = 'complete.obs'), 2))) + theme_light()
return(suppressWarnings(p))
}
dataset <- read.csv("austin_filtered.csv")[,c("year_built","baths_count","total_size", "zip", "size", "total","longitude","latitude","price")]
colnames(dataset)[c(3,5,6)] <- c("Building_size","Site_size","Tax")
p <- doPlots(dataset, fun = plotCorr,ii = 1:8)
writePNG(p,"Jb.png")
setwd("C:/Users/bjcfa/Desktop/website/jj")
